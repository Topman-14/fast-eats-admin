generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isDeveloper Boolean @default(false)
  userId      String   
  sizes       Size[] @relation("StoreToSize")
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  products  Product[] @relation("StoreToProduct")
  colors      Color[] @relation("StoreToColor")
  order      Order[] @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Billboard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store   @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String   @db.ObjectId
  products    Product[] @relation("CategoryToProduct")
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   @@index([storeId])
   @@index([billboardId])
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([storeId])
}
model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  products  Product[]
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([storeId])
}
model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String   @db.ObjectId
  category     Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId    String?  @db.ObjectId
  size      Size?     @relation(fields: [sizeId], references: [id])
  colorId   String?  @db.ObjectId
  color     Color?    @relation(fields: [colorId], references: [id])
  name      String
  description      String
  price     Float
  quantity  Int
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images Image[]
  orderItem OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


   @@index([storeId])
   @@index([sizeId])
   @@index([colorId])
   @@index([categoryId])
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index (productId)
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String    @db.ObjectId
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  email String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String   @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String   @db.ObjectId
  product Product @relation(fields: [productId], references: [id])


  @@index([orderId])
  @@index([productId])
}